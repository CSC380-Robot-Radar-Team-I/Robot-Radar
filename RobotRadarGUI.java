import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.LinkedList;

public class RobotGUI extends javax.swing.JFrame {
    RobotManager rm;
    Graphics g;



    
    /**
     * Creates new form JFrame
     */
    public RobotGUI(RobotManager r )   {
        initComponents();
        rm = r;

    }
    //I hope this is correct...
    private abstract class Radar extends Graphics{
        public Radar(javax.swing.JPanel RadarPanel) {
            super();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        CameraPanel = new javax.swing.JPanel();
        RadarPanel = new javax.swing.JPanel();
        StopServerButton = new javax.swing.JButton();
        ResetScanButton = new javax.swing.JButton();
        ConnectButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextArea1 = new javax.swing.JTextArea();
        jSlider1 = new javax.swing.JSlider();
        IPField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CameraPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 204, 255)));

        javax.swing.GroupLayout CameraPanelLayout = new javax.swing.GroupLayout(CameraPanel);
        CameraPanel.setLayout(CameraPanelLayout);
        CameraPanelLayout.setHorizontalGroup(
                CameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 230, Short.MAX_VALUE)
        );
        CameraPanelLayout.setVerticalGroup(
                CameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 195, Short.MAX_VALUE)
        );

        RadarPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0)));
        RadarPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                try {
                    RadarPanelKeyPressed(evt);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                try {
                    RadarPanelKeyReleased(evt);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        javax.swing.GroupLayout RadarPanelLayout = new javax.swing.GroupLayout(RadarPanel);
        RadarPanel.setLayout(RadarPanelLayout);
        RadarPanelLayout.setHorizontalGroup(
                RadarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 231, Short.MAX_VALUE)
        );
        RadarPanelLayout.setVerticalGroup(
                RadarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        StopServerButton.setText("Stop Server");
        StopServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    StopServerButtonActionPerformed(evt);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        ResetScanButton.setText("Reset");
        ResetScanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetScanButtonActionPerformed(evt);
            }
        });

        ConnectButton.setText("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    ConnectButtonActionPerformed(evt);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        TextArea1.setEditable(false);
        TextArea1.setColumns(20);
        TextArea1.setRows(5);
        TextArea1.setText("w --> Move Forward\na --> Move Left\ns --> Move Backward\nd --> Move Right");
        jScrollPane2.setViewportView(TextArea1);

        IPField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(CameraPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(IPField, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(ConnectButton))
                                                        .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(RadarPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(52, 52, 52)
                                                .addComponent(StopServerButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(ResetScanButton)
                                                .addGap(44, 44, 44))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(CameraPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(RadarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ConnectButton)
                                        .addComponent(IPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(StopServerButton)
                                        .addComponent(ResetScanButton))
                                .addGap(41, 41, 41))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(234, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void IPFieldActionPerformed(ActionEvent evt) {
            }

    private void StopServerButtonActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
        // TODO add your handling code here:

        rm.disconnect();
    }
    
//Unsure what needs to be done for the reset button
    private void ResetScanButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

    }

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
        // TODO add your handling code here:
        String hostIP = IPField.getText();
        rm.connect(hostIP);
    }
    //Still figuring out the slider business
    private void jSlider1MouseDragged(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        jSlider1.setMaximum(180);
        jSlider1.setMaximum(0);
        jSlider1.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent changeEvent) {

                JSlider s = (JSlider) changeEvent.getSource();
            }
        });

    }
    //This may be right? If someone can look it over and just tell me if I'm being dumb or I'm good, that'd be GREAT lol
    private void RadarPanelKeyPressed(java.awt.event.KeyEvent evt) throws Exception {
        // TODO add your handling code here:
         if (evt.getKeyCode() == KeyEvent.VK_ALT) {
            rm.sendCommand(evt);
        }
        else if(evt.getKeyCode() == KeyEvent.VK_W || evt.getKeyCode() == KeyEvent.VK_UP){
            rm.sendCommand(evt);
        }
        else if(evt.getKeyCode() == KeyEvent.VK_S || evt.getKeyCode() == KeyEvent.VK_DOWN){
            rm.sendCommand(evt);
        }
        else if(evt.getKeyCode() == KeyEvent.VK_A || evt.getKeyCode() == KeyEvent.VK_LEFT){
            rm.sendCommand(evt);
        }
        else if(evt.getKeyCode() == KeyEvent.VK_D || evt.getKeyCode() == KeyEvent.VK_RIGHT){
            rm.sendCommand(evt);
        
    }

    private void RadarPanelKeyReleased(java.awt.event.KeyEvent evt) throws Exception {
        // TODO add your handling code here:

            rm.SendCommand("halt");

    }
//The dot part still needs to be figured out
    public void updateInterfaceInfo(LinkedList<Dot> dotList){

        // something to add the new dots
        if (dotList.size() > 100 * 0.2) {
            for (int i = 0; i < 100 * 0.1; i++) {
                dotList.remove(i);
            }
        }
        // Draws each circle
        for (Dot d : dotList) {
             RadarPanel.getGraphics();
             g.drawOval(240,240,50,50);


        }
        dotList.clear();

    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RobotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RobotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RobotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RobotGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {



            public void run() {

                RobotManager r = new RobotManager();
                new RobotGUI(r).setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel CameraPanel;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JTextField IPField;
    private javax.swing.JPanel RadarPanel;
    private javax.swing.JButton ResetScanButton;
    private javax.swing.JButton StopServerButton;
    private javax.swing.JTextArea TextArea1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration                   
}
